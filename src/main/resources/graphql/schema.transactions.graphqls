extend type Query {
    retrieveOneTransaction(userId: String!, transactionId: String!): Transaction
    retrieveAllUserTransactions(userId: String!): [Transaction]
    retryTransaction(transactionId: String!): Transaction
}

extend type Mutation {
    processExternalTransaction(userId: String!): String
}

enum TransactionStatuses {
    CREATED,
    SUCCESS,
    FAILED,
    PENDING
}

enum TransactionTypes {
    USERTOUSER
    USERTOMERCHANT
    MERCHANTTOUSER
    MERCHANTTOMERCHANT
    EXTERNALTOMERCHANT
    MERCHANTTOEXTERNAL
    EXTERNALTOUSER
    USERTOEXTERNAL
}

type Transaction {
    id: Int!
    transactionId: String!
    transactionType: TransactionTypes!
    fromUserId: Int
    toUserId: Int
    fromEmail: String!
    toEmail: String!
    fromMerchant: String
    toMerchant: String
    fromExternal: Int
    toExternal: Int
    fromAccountId: String!
    toAccountId: String!
    currency: Currencies!
    amount: Int!
    status: TransactionStatuses!
}
